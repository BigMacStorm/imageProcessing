#include <math.h>
#define SWAP(a,b) tempr=(a);(a)=(b);(b)=tempr
#include <iostream>
#include <cstdlib>
#include <fstream>

using namespace std;

void fft(float data[], unsigned long nn, int isign)
{
	unsigned long n,mmax,m,j,istep,i;
	double wtemp,wr,wpr,wpi,wi,theta;
	float tempr,tempi;
	
	n=nn << 1;

	
	j=1;

	for (i=1;i<n;i+=2) {
		if (j > i) {
			SWAP(data[j],data[i]);
			SWAP(data[j+1],data[i+1]);
		}
		m=n >> 1;
		while (m >= 2 && j > m) {
			j -= m;
			m >>= 1;
		}
		j += m;
	}

	
	

	mmax=2;
	while (n > mmax) {
		istep=mmax << 1;
		theta=isign*(6.28318530717959/mmax);
		wtemp=sin(0.5*theta);
		wpr = -2.0*wtemp*wtemp;
		wpi=sin(theta);
		wr=1.0;
		wi=0.0;
		for (m=1;m<mmax;m+=2) {
			for (i=m;i<=n;i+=istep) {
				j=i+mmax;
				tempr=wr*data[j]-wi*data[j+1];
				tempi=wr*data[j+1]+wi*data[j];
				data[j]=data[i]-tempr;
				data[j+1]=data[i+1]-tempi;
				data[i] += tempr;
				data[i+1] += tempi;
			}
			wr=(wtemp=wr)*wpr-wi*wpi+wr;
			wi=wi*wpr+wtemp*wpi+wi;
		}
		mmax=istep;
	}

	if (isign == 1)
	{
	for( int i=1; i<n+1;i++)
		{
		data[i] = data[i]/nn;
		}

	}
	 
	
}
#undef SWAP
/* (C) Copr. 1986-92 Numerical Recipes Software 0#Y". */


int main()
{
//1 part a

ofstream fout;
ifstream fin;

float data[8] = {2,0,3,0,4,0,4,0};
int N = 4;

	//DFT, stored in from <real>, <imaginary>
	fft(data-1,N,-1);
	fout.open("onePartADFT.txt");
	for(int i=0;i<2*N;i+=2)
	{
		fout<<data[i]<<','<<data[i+1]<<endl;
	}
	fout.close();

	
	//calculate magnitude
	fout.open("onePartAMagnitude.txt");
	for(int i=0;i<N*2;i+=2)
	{
	fout<<sqrt(pow(data[i],2)+pow(data[i+1],2))<<endl;
	}

	fout.close();
	//inverse DFT
	fft(data-1,N,1);
	fout.open("onePartAInverseDFT.txt");
	for(int i=0; i<N*2;i++)
		fout<<data[i] <<endl;
	fout.close();


///////////////////////////////////////////////////////////////////////////////
	//1 part b
	N = 128;
	float dataTwo[256];

	//calculate function, centering it useing (-1)^x taking 128 samples
	for (int i=0;i<N*2;i+=2)
	{
	dataTwo[i] = cos((6.28318530717959*(i/2)*8)/128)*pow(-1,(i/2));
	dataTwo[i+1]=0;
	}

	


	//DFT stored useing <real>,<imaginary>
	fft(dataTwo-1, N, -1);
	fout.open("onePartBDFT.txt");
	for(int i=0;i<2*N;i+=2)
	{
		fout<<dataTwo[i]<<','<<dataTwo[i+1]<<endl;
	}
	fout.close();

	//calculate the magnatude
	fout.open("onePartBMagnitude.txt");
	for(int i=0;i<N*2;i+=2)
	{
	fout<<sqrt(pow(dataTwo[i],2)+pow(dataTwo[i+1],2))<<endl;
	}
	fout.close();

	//calculate Phase
	fout.open("onePartBPhase.txt");
	for(int i=0;i<N*2;i+=2)
	{
	fout<<atan(dataTwo[i+1]/dataTwo[i])<<endl;
	}
	fout.close();




/////////////////////////////////////////////////////////////////
//Part C
	
	N = 128;
	float dataThree[256];
	int index = 0;
	string temp;
	fin.open("Rect_128.dat");
	
	for(int i=0;i<N*2;i++)
	{
	dataThree[i]=0;
	
	}

	for(int i=0;i<2*N;i+=2)
	{
	getline(fin,temp);
	dataThree[i] = atof(temp.c_str());
	
	}
	fin.close();

	

	
	
	
	//DFT stored useing <real>,<imaginary>
	fft(dataThree-1, N, -1);

	fout.clear();
	fout.open("onePartCDFT.txt");
	for(int i=0;i<2*N;i+=2)
	{
		fout<<dataThree[i]<<','<<dataThree[i+1]<<endl;
	
	}
	fout.close();

	//calculate the magnatude
	fout.open("onePartCMagnitude.txt");
	for(int i=0;i<N*2;i+=2)
	{
	fout<<sqrt(pow(dataThree[i],2)+pow(dataThree[i+1],2))<<endl;
	}
	fout.close();

	//calculate Phase
	fout.open("onePartCPhase.txt");
	for(int i=0;i<N*2;i+=2)
	{
	
	fout<<atan(dataThree[i+1]/dataThree[i+1])<<endl;
	}
	fout.close();
	

	//inverse DFT
	fft(dataThree-1, N, 1);
	
	
	for(int i=0;i<256;i++)
	{
	cout<<dataThree[i]<<endl;
	}
	

return(0);
}
